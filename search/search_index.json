{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-soda-core","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect 2.0 collection for Soda Core</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p><code>prefect-soda-core</code> is based on <code>soda-core</code>. As <code>soda-core</code> requires you to specify the right option for your database, so does <code>prefect-soda-core</code>. I.e. to use <code>prefect-soda-core</code> with Snowflake, run the following:</p> <pre><code>pip install prefect-soda-core[snowflake]\n</code></pre> <p>You can find the list of supported options in <code>setup.py</code>.</p> <p>Please note that since this integration is built on top of Soda CLI, it is not possible to run data quality checks using Spark.</p>"},{"location":"#write-and-run-a-flow","title":"Write and run a flow","text":"<pre><code>from prefect import flow\nfrom prefect_soda_core.soda_configuration import SodaConfiguration\nfrom prefect_soda_core.sodacl_check import SodaCLCheck\nfrom prefect_soda_core.tasks import soda_scan_execute\n\n\n@flow\ndef run_soda_scan():\n    soda_configuration_block = SodaConfiguration(\n        configuration_yaml_path=\"/path/to/config.yaml\"\n    )\n    soda_check_block = SodaCLCheck(\n        sodacl_yaml_path=\"/path/to/checks.yaml\"\n    )\n\n    return soda_scan_execute(\n        data_source_name=\"my_datasource\",\n        configuration=soda_configuration_block,\n        checks=soda_check_block,\n        variables={\"var\": \"value\"},\n        verbose=True\n    )\n\nrun_soda_scan()\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-soda-core</code>, feel free to open an issue in the prefect-soda-core repository.</p> <p>If you have any questions or issues while using <code>prefect-soda-core</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-soda-core</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/sodadata/prefect-soda-core.git\n\ncd prefect-soda-core/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"checks/","title":"Checks","text":""},{"location":"checks/#prefect_soda_core.sodacl_check","title":"<code>prefect_soda_core.sodacl_check</code>","text":"<p>SodaCL check block</p>"},{"location":"checks/#prefect_soda_core.sodacl_check.SodaCLCheck","title":"<code>SodaCLCheck</code>","text":"<p>This block represents a SodaCL check that can be used when running Soda scans.</p> <p>Parameters:</p> Name Type Description Default <code>sodacl_yaml_path</code> <code>str</code> <p>Absolute path of the Soda Checks file.</p> required <code>sodacl_yaml_str</code> <code>str</code> <p>Optional YAML string containing the Soda Checks details. If provided, it will be saved at the path provided with <code>sodacl_yaml_path</code>.</p> required Example <pre><code>from prefect_soda_core.sodacl_check import SodaCLCheck\nsodacl_check_block = SodaCLCheck.load(\"BLOCK_NAME\")\n</code></pre> Source code in <code>prefect_soda_core/sodacl_check.py</code> <pre><code>class SodaCLCheck(Block):\n\"\"\"\n    This block represents a SodaCL check that can be used when running Soda scans.\n\n    Args:\n        sodacl_yaml_path (str): Absolute path of the Soda Checks file.\n        sodacl_yaml_str (str): Optional YAML string containing the Soda Checks\n            details. If provided, it will be saved\n            at the path provided with `sodacl_yaml_path`.\n\n    Example:\n        ```python\n        from prefect_soda_core.sodacl_check import SodaCLCheck\n        sodacl_check_block = SodaCLCheck.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    sodacl_yaml_path: str\n    sodacl_yaml_str: Optional[str]\n\n    _block_type_name: Optional[str] = \"SodaCL Check\"\n    _logo_url: Optional[\n        HttpUrl\n    ] = \"https://github.com/PrefectHQ/prefect/blob/main/docs/img/collections/soda.png\"  # noqa\n\n    @root_validator(pre=True)\n    def check_block_configuration(cls, values):\n\"\"\"\n        Ensure that the check configuration options are valid.\n        A check configuration is valid if it provides just the path to the\n        YAML Soda checks file or if it has both the path\n        to the Soda checks file and a valid YAML Soda checks string.\n\n        Raises:\n            SodaConfigurationException: When the provided checks configuration\n                is not valid.\n        \"\"\"\n        sodacl_yaml_str_exists = bool(values.get(\"sodacl_yaml_str\"))\n\n        # If the YAML string is passed, but is not a valid YAML, then raise error\n        if sodacl_yaml_str_exists:\n            try:\n                yaml_str = values.get(\"sodacl_yaml_str\")\n                safe_load(yaml_str)\n            except YAMLError as exc:\n                msg = f\"The provided checks YAML is not valid. Error is: {exc}\"\n                raise SodaConfigurationException(msg)\n\n        return values\n\n    def persist_checks(self):\n\"\"\"\n        Persist Soda checks on the file system, if necessary.\n        Please note that, if the path already exists, it will be overwritten.\n        \"\"\"\n\n        # If a YAML string and path are passed, then persist the configuration\n        if self.sodacl_yaml_str and self.sodacl_yaml_path:\n            with open(self.sodacl_yaml_path, \"w\") as f:\n                safe_dump(data=self.sodacl_yaml_str, stream=f)\n</code></pre>"},{"location":"checks/#prefect_soda_core.sodacl_check.SodaCLCheck.check_block_configuration","title":"<code>check_block_configuration</code>","text":"<p>Ensure that the check configuration options are valid. A check configuration is valid if it provides just the path to the YAML Soda checks file or if it has both the path to the Soda checks file and a valid YAML Soda checks string.</p> <p>Raises:</p> Type Description <code>SodaConfigurationException</code> <p>When the provided checks configuration is not valid.</p> Source code in <code>prefect_soda_core/sodacl_check.py</code> <pre><code>@root_validator(pre=True)\ndef check_block_configuration(cls, values):\n\"\"\"\n    Ensure that the check configuration options are valid.\n    A check configuration is valid if it provides just the path to the\n    YAML Soda checks file or if it has both the path\n    to the Soda checks file and a valid YAML Soda checks string.\n\n    Raises:\n        SodaConfigurationException: When the provided checks configuration\n            is not valid.\n    \"\"\"\n    sodacl_yaml_str_exists = bool(values.get(\"sodacl_yaml_str\"))\n\n    # If the YAML string is passed, but is not a valid YAML, then raise error\n    if sodacl_yaml_str_exists:\n        try:\n            yaml_str = values.get(\"sodacl_yaml_str\")\n            safe_load(yaml_str)\n        except YAMLError as exc:\n            msg = f\"The provided checks YAML is not valid. Error is: {exc}\"\n            raise SodaConfigurationException(msg)\n\n    return values\n</code></pre>"},{"location":"checks/#prefect_soda_core.sodacl_check.SodaCLCheck.persist_checks","title":"<code>persist_checks</code>","text":"<p>Persist Soda checks on the file system, if necessary. Please note that, if the path already exists, it will be overwritten.</p> Source code in <code>prefect_soda_core/sodacl_check.py</code> <pre><code>def persist_checks(self):\n\"\"\"\n    Persist Soda checks on the file system, if necessary.\n    Please note that, if the path already exists, it will be overwritten.\n    \"\"\"\n\n    # If a YAML string and path are passed, then persist the configuration\n    if self.sodacl_yaml_str and self.sodacl_yaml_path:\n        with open(self.sodacl_yaml_path, \"w\") as f:\n            safe_dump(data=self.sodacl_yaml_str, stream=f)\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#prefect_soda_core.soda_configuration","title":"<code>prefect_soda_core.soda_configuration</code>","text":"<p>Soda configuration block</p>"},{"location":"configuration/#prefect_soda_core.soda_configuration.SodaConfiguration","title":"<code>SodaConfiguration</code>","text":"<p>This block can be used to provide the configuration required to run Soda scans. For more information, please refer to the official docs  # noqa</p> <p>Parameters:</p> Name Type Description Default <code>configuration_yaml_path</code> <code>str</code> <p>Absolute path of the Soda configuration file.</p> required <code>configuration_yaml_str</code> <code>str</code> <p>Optional YAML string containing the Soda configuration details. If provided, it will be saved at the path provided with <code>configuration_yaml_path</code>.</p> required Example <p>Load stored Soda configuration. <pre><code>from prefect_soda_core.soda_configuration import SodaConfiguration\nsoda_configuration_block = SodaConfiguration.load(\"BLOCK_NAME\")\n</code></pre></p> Source code in <code>prefect_soda_core/soda_configuration.py</code> <pre><code>class SodaConfiguration(Block):\n\"\"\"\n    This block can be used to provide the configuration\n    required to run Soda scans.\n    For more information, please refer to the\n    [official docs](https://docs.soda.io/soda-core/configuration.html#configuration-instructions)  # noqa\n\n    Args:\n        configuration_yaml_path (str): Absolute path of the Soda configuration file.\n        configuration_yaml_str (str): Optional YAML string containing the Soda configuration\n            details. If provided, it will be saved\n            at the path provided with `configuration_yaml_path`.\n\n    Example:\n        Load stored Soda configuration.\n        ```python\n        from prefect_soda_core.soda_configuration import SodaConfiguration\n        soda_configuration_block = SodaConfiguration.load(\"BLOCK_NAME\")\n        ```\n    \"\"\"\n\n    configuration_yaml_path: str\n    configuration_yaml_str: Optional[str]\n\n    _block_type_name: Optional[str] = \"Soda Configuration\"\n    _logo_url: Optional[\n        HttpUrl\n    ] = \"https://github.com/PrefectHQ/prefect/blob/main/docs/img/collections/soda.png\"  # noqa\n\n    @root_validator(pre=True)\n    def check_block_configuration(cls, values):\n\"\"\"\n        Ensure that the configuration options are valid.\n        A configuration is valid if it provides just the path to the\n        YAML configuration file or if it has both the path\n        to the configuration file and a valid YAML configuration string.\n\n        Raises:\n            SodaConfigurationException: When the provided configuration is not valid.\n        \"\"\"\n        configuration_yaml_str_exists = bool(values.get(\"configuration_yaml_str\"))\n\n        # If the YAML string is passed, but is not a valid YAML, then raise error\n        if configuration_yaml_str_exists:\n            try:\n                yaml_str = values.get(\"configuration_yaml_str\")\n                safe_load(yaml_str)\n            except YAMLError as exc:\n                msg = f\"The provided configuration YAML is not valid. Error is: {exc}\"\n                raise SodaConfigurationException(msg)\n\n        return values\n\n    def persist_configuration(self):\n\"\"\"\n        Persist Soda configuration on the file system, if necessary.\n        Please note that, if the path already exists, it will be overwritten.\n        \"\"\"\n\n        # If a YAML string and path are passed, then persist the configuration\n        if self.configuration_yaml_str and self.configuration_yaml_path:\n            with open(self.configuration_yaml_path, \"w\") as f:\n                safe_dump(data=self.configuration_yaml_str, stream=f)\n</code></pre>"},{"location":"configuration/#prefect_soda_core.soda_configuration.SodaConfiguration.check_block_configuration","title":"<code>check_block_configuration</code>","text":"<p>Ensure that the configuration options are valid. A configuration is valid if it provides just the path to the YAML configuration file or if it has both the path to the configuration file and a valid YAML configuration string.</p> <p>Raises:</p> Type Description <code>SodaConfigurationException</code> <p>When the provided configuration is not valid.</p> Source code in <code>prefect_soda_core/soda_configuration.py</code> <pre><code>@root_validator(pre=True)\ndef check_block_configuration(cls, values):\n\"\"\"\n    Ensure that the configuration options are valid.\n    A configuration is valid if it provides just the path to the\n    YAML configuration file or if it has both the path\n    to the configuration file and a valid YAML configuration string.\n\n    Raises:\n        SodaConfigurationException: When the provided configuration is not valid.\n    \"\"\"\n    configuration_yaml_str_exists = bool(values.get(\"configuration_yaml_str\"))\n\n    # If the YAML string is passed, but is not a valid YAML, then raise error\n    if configuration_yaml_str_exists:\n        try:\n            yaml_str = values.get(\"configuration_yaml_str\")\n            safe_load(yaml_str)\n        except YAMLError as exc:\n            msg = f\"The provided configuration YAML is not valid. Error is: {exc}\"\n            raise SodaConfigurationException(msg)\n\n    return values\n</code></pre>"},{"location":"configuration/#prefect_soda_core.soda_configuration.SodaConfiguration.persist_configuration","title":"<code>persist_configuration</code>","text":"<p>Persist Soda configuration on the file system, if necessary. Please note that, if the path already exists, it will be overwritten.</p> Source code in <code>prefect_soda_core/soda_configuration.py</code> <pre><code>def persist_configuration(self):\n\"\"\"\n    Persist Soda configuration on the file system, if necessary.\n    Please note that, if the path already exists, it will be overwritten.\n    \"\"\"\n\n    # If a YAML string and path are passed, then persist the configuration\n    if self.configuration_yaml_str and self.configuration_yaml_path:\n        with open(self.configuration_yaml_path, \"w\") as f:\n            safe_dump(data=self.configuration_yaml_str, stream=f)\n</code></pre>"},{"location":"exceptions/","title":"Exceptions","text":""},{"location":"exceptions/#prefect_soda_core.exceptions","title":"<code>prefect_soda_core.exceptions</code>","text":"<p>Exceptions to raise in case of issues while configuring or running Soda.</p>"},{"location":"exceptions/#prefect_soda_core.exceptions.SodaConfigurationException","title":"<code>SodaConfigurationException</code>","text":"<p>Exception to raise in case of issues with Soda configuration.</p> Source code in <code>prefect_soda_core/exceptions.py</code> <pre><code>class SodaConfigurationException(Exception):\n\"\"\"\n    Exception to raise in case of issues with Soda configuration.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"tasks/","title":"Tasks","text":""},{"location":"tasks/#prefect_soda_core.tasks","title":"<code>prefect_soda_core.tasks</code>","text":"<p>Collection of tasks that can be used to run Data Quality checks using Soda Core.</p>"},{"location":"tasks/#prefect_soda_core.tasks.soda_scan_execute","title":"<code>soda_scan_execute</code>  <code>async</code>","text":"<p>Task that execute a Soda Scan. First, the scan is created and configured using the provided configuration, checks, and other options, and then it is executed against the provided data source.</p> <p>Parameters:</p> Name Type Description Default <code>data_source_name</code> <code>str</code> <p>The name of the data source against which the checks will be executed. The data source name must match one of the data sources provided in the <code>configuration</code> object.</p> required <code>configuration</code> <code>SodaConfiguration</code> <p><code>SodaConfiguration</code> object that will be used to configure the scan before its execution.</p> required <code>checks</code> <code>SodaCLCheck</code> <p><code>SodaCLCheck</code> object that will be used, together with <code>configuration</code>, to configure the scan before its execution.</p> required <code>variables</code> <code>Optional[Dict[str, str]]</code> <p>A <code>Dict[str, str]</code> that contains all variables references within checks.</p> required <code>verbose</code> <code>bool</code> <p>Whether to run the checks with a verbose log or not. Default to <code>False</code>.</p> <code>False</code> <p>Returns:</p> Type Description <code>Union[List, str]</code> <p>Logs produced by running <code>soda scan</code> CLI command.</p> Example <pre><code>from prefect_soda_core.sodacl_check import SodaCLCheck\nfrom prefect_soda_core.soda_configuration import SodaConfiguration\nfrom prefect_soda_core.tasks import soda_scan_execute\n\nfrom prefect import flow\n\nsodacl_check_block = SodaCLCheck.load(\"SODACL_CHECK_BLOCK_NAME\")\nsoda_configuration_block = SodaConfiguration.load(\"SODA_CONF_BLOCK_NAME\")\n\n@flow\ndef run_soda_scan():\n    return soda_scan_execute(\n        data_source_name=\"datasource\",\n        configuration=soda_configuration_block,\n        checks=sodacl_check_block,\n        variables={\"key\": \"value\"},\n        verbose=False\n    )\n</code></pre> Source code in <code>prefect_soda_core/tasks.py</code> <pre><code>@task\nasync def soda_scan_execute(\n    data_source_name: str,\n    configuration: SodaConfiguration,\n    checks: SodaCLCheck,\n    variables: Optional[Dict[str, str]],\n    verbose: bool = False,\n) -&gt; Union[List, str]:\n\"\"\"\n    Task that execute a Soda Scan.\n    First, the scan is created and configured using the provided\n    configuration, checks, and other options, and then\n    it is executed against the provided data source.\n\n    Args:\n        data_source_name: The name of the data source against\n            which the checks will be executed. The data source name\n            must match one of the data sources provided in the\n            `configuration` object.\n        configuration: `SodaConfiguration` object that will be used\n            to configure the scan before its execution.\n        checks: `SodaCLCheck` object that will be used, together with\n            `configuration`, to configure the scan before its execution.\n        variables: A `Dict[str, str]` that contains all variables\n            references within checks.\n        verbose: Whether to run the checks with a verbose log or not.\n            Default to `False`.\n\n    Raises:\n        `RuntimeError` in case `soda scan` encounters any error\n            during execution.\n\n    Returns:\n        Logs produced by running `soda scan` CLI command.\n\n    Example:\n        ```python\n        from prefect_soda_core.sodacl_check import SodaCLCheck\n        from prefect_soda_core.soda_configuration import SodaConfiguration\n        from prefect_soda_core.tasks import soda_scan_execute\n\n        from prefect import flow\n\n        sodacl_check_block = SodaCLCheck.load(\"SODACL_CHECK_BLOCK_NAME\")\n        soda_configuration_block = SodaConfiguration.load(\"SODA_CONF_BLOCK_NAME\")\n\n        @flow\n        def run_soda_scan():\n            return soda_scan_execute(\n                data_source_name=\"datasource\",\n                configuration=soda_configuration_block,\n                checks=sodacl_check_block,\n                variables={\"key\": \"value\"},\n                verbose=False\n            )\n        ```\n    \"\"\"\n    # Persist the configuration on the file system, if necessary\n    configuration.persist_configuration()\n\n    # Perists checks on the file system, if necessary\n    checks.persist_checks()\n\n    # Soda command initial definition\n    command = (\n        f\"soda scan -d {data_source_name} -c {configuration.configuration_yaml_path}\"\n    )\n\n    # If variables are provided, add the to Soda command\n    if variables:\n        var_str = \"\".join(\n            [\n                f'-v \"{var_name}={var_value}\" '\n                for var_name, var_value in variables.items()\n            ]\n        )\n\n        command = f\"{command} {var_str}\"\n\n    # If verbose logging is requested, add corresponding option to Soda command\n    if verbose:\n        command = f\"{command} -V\"\n\n    # Build final Soda command\n    command = f\"{command} {checks.sodacl_yaml_path}\"\n\n    # Log Soda command for debuggin purpose\n    get_run_logger().debug(f\"Soda requested command is: {command}\")\n\n    # Execute Soda command\n    soda_logs = await shell_run_command.fn(command=command, return_all=True)\n\n    return soda_logs\n</code></pre>"}]}